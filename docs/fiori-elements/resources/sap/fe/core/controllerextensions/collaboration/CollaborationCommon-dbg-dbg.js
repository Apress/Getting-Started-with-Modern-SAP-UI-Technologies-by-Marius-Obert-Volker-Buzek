/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingToolkit", "sap/fe/macros/CommonHelper", "sap/ui/core/Component", "sap/ui/core/Core", "../../formatters/CollaborationFormatter"], function (BindingToolkit, CommonHelper, Component, Core, collaborationFormatter) {
  "use strict";

  var _exports = {};
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  let UserStatus;
  (function (UserStatus) {
    UserStatus[UserStatus["NotYetInvited"] = 0] = "NotYetInvited";
    UserStatus[UserStatus["NoChangesMade"] = 1] = "NoChangesMade";
    UserStatus[UserStatus["ChangesMade"] = 2] = "ChangesMade";
    UserStatus[UserStatus["CurrentlyEditing"] = 3] = "CurrentlyEditing";
  })(UserStatus || (UserStatus = {}));
  _exports.UserStatus = UserStatus;
  let UserEditingState;
  (function (UserEditingState) {
    UserEditingState["NoChanges"] = "N";
    UserEditingState["InProgress"] = "P";
  })(UserEditingState || (UserEditingState = {}));
  _exports.UserEditingState = UserEditingState;
  let Activity;
  (function (Activity) {
    Activity["Join"] = "JOIN";
    Activity["JoinEcho"] = "JOINECHO";
    Activity["Leave"] = "LEAVE";
    Activity["Change"] = "CHANGE";
    Activity["Create"] = "CREATE";
    Activity["Delete"] = "DELETE";
    Activity["Action"] = "ACTION";
    Activity["LiveChange"] = "LIVECHANGE";
    Activity["Activate"] = "ACTIVATE";
    Activity["Discard"] = "DISCARD";
    Activity["Undo"] = "UNDO";
  })(Activity || (Activity = {}));
  _exports.Activity = Activity;
  const USERS_PARAMETERS = "Users";
  const USER_ID_PARAMETER = "UserID";
  function formatInitials(fullName) {
    // remove titles - those are the ones from S/4 to be checked if there are others
    const academicTitles = ["Dr.", "Prof.", "Prof. Dr.", "B.A.", "MBA", "Ph.D."];
    academicTitles.forEach(function (academicTitle) {
      fullName = fullName.replace(academicTitle, "");
    });
    let initials;
    const parts = fullName.trimStart().split(" ");
    if (parts.length > 1) {
      var _parts$shift, _parts$pop;
      initials = ((parts === null || parts === void 0 ? void 0 : (_parts$shift = parts.shift()) === null || _parts$shift === void 0 ? void 0 : _parts$shift.charAt(0)) || "") + ((_parts$pop = parts.pop()) === null || _parts$pop === void 0 ? void 0 : _parts$pop.charAt(0));
    } else {
      initials = fullName.substring(0, 2);
    }
    return initials.toUpperCase();
  }
  function getUserColor(UserID, activeUsers, invitedUsers) {
    // search if user is known
    const user = activeUsers.find(u => u.id === UserID);
    if (user) {
      return user.color;
    } else {
      // search for next free color
      for (let i = 1; i <= 10; i++) {
        if (activeUsers.findIndex(u => u.color === i) === -1 && invitedUsers.findIndex(u => u.color === i) === -1) {
          return i;
        }
      }
      // this seems to be a popular object :) for now just return 10 for all.
      // for invited we should start from 1 again so the colors are different
      return 10;
    }
  }
  function getValueHelpDelegate(contextPath) {
    // The non null assertion is safe here, because the action is only available if the annotation is present
    const actionName = contextPath.targetEntitySet.annotations.Common.DraftRoot.ShareAction.toString();
    // We are also sure that the action exist
    const action = contextPath.targetEntityType.resolvePath(actionName);
    // By definition the action has a parameter with the name "Users"
    const userParameters = action.parameters.find(param => param.name === USERS_PARAMETERS);
    const delegateConfiguration = {
      name: CommonHelper.addSingleQuotes("sap/fe/macros/valuehelp/ValueHelpDelegate"),
      payload: {
        propertyPath: CommonHelper.addSingleQuotes(`/${userParameters.type}/${USER_ID_PARAMETER}`),
        qualifiers: {},
        valueHelpQualifier: CommonHelper.addSingleQuotes(""),
        isActionParameterDialog: true
      }
    };
    return CommonHelper.objectToString(delegateConfiguration);
  }

  // copied from CommonUtils. Due to a cycle dependency I can't use CommonUtils here.
  // That's to be fixed. the discard popover thingy shouldn't be in the common utils at all
  _exports.getValueHelpDelegate = getValueHelpDelegate;
  function getAppComponent(oControl) {
    if (oControl.isA("sap.fe.core.AppComponent")) {
      return oControl;
    }
    const oOwner = Component.getOwnerComponentFor(oControl);
    if (!oOwner) {
      return oControl;
    } else {
      return getAppComponent(oOwner);
    }
  }
  function getMe(view) {
    const shellServiceHelper = getAppComponent(view).getShellServices();
    if (!shellServiceHelper || !shellServiceHelper.hasUShell()) {
      throw "No Shell... No User";
    }
    return {
      initials: shellServiceHelper.getUser().getInitials(),
      id: shellServiceHelper.getUser().getId(),
      name: `${shellServiceHelper.getUser().getFullName()} (${getText("C_COLLABORATIONDRAFT_YOU")})`,
      initialName: shellServiceHelper.getUser().getFullName(),
      color: 6,
      //  same color as FLP...
      me: true,
      status: UserStatus.CurrentlyEditing
    };
  }
  function getText(textId) {
    const oResourceModel = Core.getLibraryResourceBundle("sap.fe.core");
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return oResourceModel.getText(textId, args);
  }

  /**
   * Generate the expression binding of the Invitation dialog.
   *
   * @param dataModelPath The DataModelObjectPath
   * @returns The dialog title binding expression
   */
  _exports.getText = getText;
  function getInvitationDialogTitleExpBinding(dataModelPath) {
    var _headerInfo$Title;
    const headerInfo = dataModelPath.targetObject;
    const title = getExpressionFromAnnotation((_headerInfo$Title = headerInfo.Title) === null || _headerInfo$Title === void 0 ? void 0 : _headerInfo$Title.Value, [], "");
    const params = ["C_COLLABORATIONDRAFT_INVITATION_DIALOG", constant(headerInfo.TypeName), title];
    const titleExpression = formatResult(params, collaborationFormatter.getFormattedText);
    return compileExpression(titleExpression);
  }
  _exports.getInvitationDialogTitleExpBinding = getInvitationDialogTitleExpBinding;
  const CollaborationUtils = {
    formatInitials: formatInitials,
    getUserColor: getUserColor,
    getMe: getMe,
    getAppComponent: getAppComponent,
    getText: getText,
    getInvitationDialogTitleExpBinding: getInvitationDialogTitleExpBinding
  };
  _exports.CollaborationUtils = CollaborationUtils;
  function shareObject(bindingContext) {
    let users = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const model = bindingContext.getModel();
    const metaModel = model.getMetaModel();
    const entitySet = metaModel.getMetaPath(bindingContext);
    const shareActionName = metaModel.getObject(`${entitySet}@com.sap.vocabularies.Common.v1.DraftRoot/ShareAction`);
    const shareAction = model.bindContext(`${shareActionName}(...)`, bindingContext);
    shareAction.setParameter("Users", users);
    shareAction.setParameter("ShareAll", true);
    return shareAction.execute();
  }
  _exports.shareObject = shareObject;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
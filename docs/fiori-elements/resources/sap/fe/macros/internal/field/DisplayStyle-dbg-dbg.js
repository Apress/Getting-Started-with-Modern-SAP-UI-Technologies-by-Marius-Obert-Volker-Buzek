/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/CriticalityFormatters", "sap/fe/macros/field/FieldHelper", "sap/ui/mdc/enum/EditMode"], function (BuildingBlockTemplateProcessor, MetaModelConverter, StableIdHelper, CriticalityFormatters, FieldHelper, EditMode) {
  "use strict";

  var buildExpressionForCriticalityButtonType = CriticalityFormatters.buildExpressionForCriticalityButtonType;
  var generate = StableIdHelper.generate;
  var xml = BuildingBlockTemplateProcessor.xml;
  //This is not yet a "real" building block, but rather a wrapper for the later on yet to be defined solution.
  const DisplayStyle = {
    /**
     * Generates the button template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getButtonTemplate: internalField => {
      var _internalField$format, _internalField$format2, _internalField$format3;
      const convertedDataField = MetaModelConverter.convertMetaModelContext(internalField.dataField);
      const oDataModelPath = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField, internalField.entitySet);
      const icon = ((_internalField$format = internalField.formatOptions) === null || _internalField$format === void 0 ? void 0 : _internalField$format.showIconUrl) ?? false ? convertedDataField.IconUrl : undefined;
      const text = !(((_internalField$format2 = internalField.formatOptions) === null || _internalField$format2 === void 0 ? void 0 : _internalField$format2.showIconUrl) ?? false) ? convertedDataField.Label : undefined;
      const tooltip = ((_internalField$format3 = internalField.formatOptions) === null || _internalField$format3 === void 0 ? void 0 : _internalField$format3.showIconUrl) ?? false ? convertedDataField.Label : undefined;
      let button = "";
      if (convertedDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
        button = xml`<Button
				xmlns="sap.m"
				visible="${internalField.visible}"
				text="${text}"
				icon="${icon}"
				enabled="${internalField.navigationAvailable}"
				tooltip="${tooltip}"
				press="${internalField.buttonPress}"
			/>`;
      } else if (FieldHelper.isDataFieldActionButtonVisible(void 0, convertedDataField, internalField.buttonIsBound, internalField.buttonOperationAvailable)) {
        const enabled = FieldHelper.isDataFieldActionButtonEnabled(convertedDataField, internalField.buttonIsBound, internalField.buttonOperationAvailable, internalField.buttonOperationAvailableFormatted);
        const type = buildExpressionForCriticalityButtonType(oDataModelPath);
        button = xml`<Button
				xmlns="sap.m"
			    class="${internalField.class}"
				text="${text}"
				icon="${icon}"
				tooltip="${tooltip}"
				press="${internalField.buttonPress}"
				enabled="${enabled}"
				visible="${internalField.visible}"
				type="${type}"
				/>`;
      }
      return button;
    },
    /**
     * Generates the Contact template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getContactTemplate(internalField) {
      const contextMetaPath = internalField.dataField.getModel().createBindingContext("Target/$AnnotationPath", internalField.dataField);
      return xml`
		<macros:Contact
			idPrefix="${internalField.idPrefix}"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			metaPath="${contextMetaPath}"
			contextPath="${internalField.entitySet}"
			_flexId="${internalField._flexId}"
			visible="${internalField.contactVisible}"
		/>`;
    },
    /**
     * Generates the innerpart of the data point to be used in getDataPointTemplate.
     *
     * @param internalField Reference to the current internal field instance
     * @param withConditionalWrapper Boolean value to determine whether the DataPoint
     * 					  			shall be generated for the conditional wrapper case
     * @returns An XML-based string with the definition of the field control
     */
    getDataPointInnerPart(internalField, withConditionalWrapper) {
      const formatOptions = xml`<internalMacro:formatOptions 
				xmlns:internalMacro="sap.fe.macros.internal"
				measureDisplayMode="${internalField.formatOptions.measureDisplayMode}"
				showEmptyIndicator="${internalField.formatOptions.showEmptyIndicator}"
				isAnalytics="${internalField.formatOptions.isAnalytics}"
			/>`;
      return xml`<internalMacro:DataPoint 
			xmlns:internalMacro="sap.fe.macros.internal"
			idPrefix="${internalField.idPrefix}"
			visible="${!withConditionalWrapper ? internalField.displayVisible : ""}"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			_flexId="${internalField._flexId}"
			metaPath="${internalField.annotationPath}"
			contextPath="${internalField.entitySet}"
		>
			${formatOptions}
		</internalMacro:DataPoint>`;
    },
    /**
     * Generates the DataPoint template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getDataPointTemplate(internalField) {
      if ((internalField.formatOptions.isAnalytics ?? false) && (internalField.hasUnitOrCurrency ?? false)) {
        return xml`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls" visible="${internalField.displayVisible}" condition="${internalField.hasValidAnalyticalCurrencyOrUnit}">
				<controls:contentTrue>
					 ${this.getDataPointInnerPart(internalField, true)}
				</controls:contentTrue>
					<controls:contentFalse>
						<Text xmlns="sap.m" text="*" />
				</controls:contentFalse>
			</controls:ConditionalWrapper>`;
      } else {
        return this.getDataPointInnerPart(internalField, false);
      }
    },
    /**
     * Generates the ExpandableText template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getExpandableText(internalField) {
      var _internalField$format4, _internalField$format5;
      return xml`
			<ExpandableText
				xmlns="sap.m"
				id="${internalField === null || internalField === void 0 ? void 0 : internalField.noWrapperId}"
				visible="${internalField === null || internalField === void 0 ? void 0 : internalField.displayVisible}"
				text="${internalField === null || internalField === void 0 ? void 0 : internalField.text}"
				overflowMode="${internalField === null || internalField === void 0 ? void 0 : (_internalField$format4 = internalField.formatOptions) === null || _internalField$format4 === void 0 ? void 0 : _internalField$format4.textExpandBehaviorDisplay}"
				maxCharacters="${internalField === null || internalField === void 0 ? void 0 : (_internalField$format5 = internalField.formatOptions) === null || _internalField$format5 === void 0 ? void 0 : _internalField$format5.textMaxCharactersDisplay}"
				emptyIndicatorMode="${internalField === null || internalField === void 0 ? void 0 : internalField.emptyIndicatorMode}"
		/>`;
    },
    /**
     * Generates the File template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getFile(internalField) {
      let innerFilePart;
      if (internalField.fileIsImage) {
        innerFilePart = xml`
			<controls:avatar xmlns:controls="sap.fe.macros.controls">
				<Avatar
					xmlns="sap.m"
					visible="${internalField.displayVisible}"
					src="${internalField.fileAvatarSrc}"
					displaySize="S"
					class="sapUiSmallMarginEnd"
					displayShape="Square"
				/>
			</controls:avatar>`;
      } else {
        innerFilePart = xml`
			<controls:icon xmlns:controls="sap.fe.macros.controls">
				<core:Icon src="${internalField.fileIconSrc}" class="sapUiSmallMarginEnd" visible="${internalField.fileStreamNotEmpty}" />
			</controls:icon>
			<controls:link>
				<Link
					xmlns="sap.m"
					text="${internalField.fileLinkText}"
					target="_blank"
					href="${internalField.fileLinkHref}"
					visible="${internalField.fileStreamNotEmpty}"
					wrapping="true"
				/>
			</controls:link>
			<controls:text>
				<Text xmlns="sap.m" emptyIndicatorMode="On" text="" visible="${internalField.fileTextVisible}" />
			</controls:text>`;
      }
      if (internalField.editMode !== EditMode.Display) {
        const beforeDialogOpen = internalField.collaborationEnabled ? "FIELDRUNTIME.handleOpenUploader" : undefined;
        const afterDialogOpen = internalField.collaborationEnabled ? "FIELDRUNTIME.handleCloseUploader" : undefined;
        innerFilePart += xml`
			<controls:fileUploader xmlns:controls="sap.fe.macros.controls">
				<u:FileUploader
					xmlns:u="sap.ui.unified"
					name="FEV4FileUpload"
					visible="${internalField.editableExpression}"
					buttonOnly="true"
					iconOnly="true"
					multiple="false"
					tooltip="{sap.fe.i18n>M_FIELD_FILEUPLOADER_UPLOAD_BUTTON_TOOLTIP}"
					icon="sap-icon://upload"
					style="Transparent"
					sendXHR="true"
					useMultipart="false"
					sameFilenameAllowed="true"
					mimeType="${internalField.fileAcceptableMediaTypes}"
					typeMissmatch="FIELDRUNTIME.handleTypeMissmatch"
					maximumFileSize="${internalField.fileMaximumSize}"
					fileSizeExceed="FIELDRUNTIME.handleFileSizeExceed"
					uploadOnChange="false"
					uploadComplete="FIELDRUNTIME.handleUploadComplete($event, ${internalField.fileFilenameExpression || "undefined"}, '${internalField.fileRelativePropertyPath}', $controller)"
					httpRequestMethod="Put"
					change="FIELDRUNTIME.uploadStream($controller, $event)"
					beforeDialogOpen="${beforeDialogOpen}"
					afterDialogClose="${afterDialogOpen}"
					uploadStart="FIELDRUNTIME.handleOpenUploader"
				/>
			</controls:fileUploader>
			<controls:deleteButton>
				<Button
					xmlns="sap.m"
					icon="sap-icon://sys-cancel"
					type="Transparent"
					press="FIELDRUNTIME.removeStream($event, ${internalField.fileFilenameExpression || "undefined"}, '${internalField.fileRelativePropertyPath}', $controller)"
					tooltip="{sap.fe.i18n>M_FIELD_FILEUPLOADER_DELETE_BUTTON_TOOLTIP}"
					visible="${internalField.editableExpression}"
					enabled="${internalField.fileStreamNotEmpty}"
				/>
			</controls:deleteButton>`;
      }
      return xml`
			<controls:FileWrapper
				xmlns:controls="sap.fe.macros.controls"
				core:require="{FIELDRUNTIME: 'sap/fe/macros/field/FieldRuntime'}"
				visible="${internalField.visible}"
				uploadUrl="${internalField.fileUploadUrl}"
				propertyPath="${internalField.fileRelativePropertyPath}"
				filename="${internalField.fileFilenamePath}"
				mediaType="${internalField.fileMediaType}"
				fieldGroupIds="${internalField.fieldGroupIds}"
				validateFieldGroup="FIELDRUNTIME.onValidateFieldGroup($controller, $event)"
				customData:sourcePath="${internalField.dataSourcePath}"
			>${innerFilePart}</controls:FileWrapper>`;
    },
    /**
     * Generates the Avatar template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getAvatarTemplate(internalField) {
      let avatarId;
      if (internalField._flexId) {
        avatarId = internalField._flexId;
      } else if (internalField.idPrefix) {
        avatarId = generate([internalField.idPrefix, "Field-content"]);
      }
      return xml`
			<controls:FormElementWrapper
				xmlns:controls="sap.fe.core.controls"
				visible="${internalField.avatarVisible}"
			>
			<Avatar
				xmlns="sap.m"
				id="${avatarId}"
				src="${internalField.avatarSrc}"
				displaySize="S"
				class="sapUiSmallMarginEnd"
				displayShape="Square"
			/>
		</controls:FormElementWrapper>`;
    },
    /**
     * Entry point for further templating processings.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getTemplate: internalField => {
      let innerFieldContent;
      switch (internalField.displayStyle) {
        case "Button":
          innerFieldContent = DisplayStyle.getButtonTemplate(internalField);
          break;
        case "DataPoint":
          innerFieldContent = DisplayStyle.getDataPointTemplate(internalField);
          break;
        case "ExpandableText":
          innerFieldContent = DisplayStyle.getExpandableText(internalField);
          break;
        case "Avatar":
          innerFieldContent = DisplayStyle.getAvatarTemplate(internalField);
          break;
        case "Contact":
          innerFieldContent = DisplayStyle.getContactTemplate(internalField);
          break;
        case "File":
          innerFieldContent = DisplayStyle.getFile(internalField);
          break;
        default:
          innerFieldContent = xml`<core:Fragment fragmentName="sap.fe.macros.internal.field.displayStyle.${internalField.displayStyle}" type="XML" />`;
      }
      return innerFieldContent;
    }
  };
  return DisplayStyle;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,